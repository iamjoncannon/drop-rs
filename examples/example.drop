mod = example

#
# this file demonstrates a multi-call
# workflow
#
# signup: retrieves a csrf_token and stores it
#
# login: uses the csrf_token to login user 
# and receive an api token
#
# get user: uses the api token to make an api call
#

# 
# drop hit example.post.signup
#
# this 'hit' can also be evaluated
# without being run
# drop give example.post.signup
#
post "signup" {

  base_url = env.base_url

  path = mod.sign_up_path

  #
  # hcl utility helpers for path values
  #
  # path = join( 
  #   "/some/path",
  #   url_params(
  #     ["value", "value"],
  #     ["end_date", inputs.[value]],
  #   )
  # )

  # request body, which can be json
  # or a combination of json and an 
  # hcl variable
  body = {
    "user_name" : inputs.user_name,
    "password" : user_password
  }

  # after call actions, in this case,
  # storing a secret
  after = [
    {
      "type" : "set_secret",
      "input" : response.headers.csrf_token,
      "key" : "csrf_token",
      "env" : "base",
      "overwrite" : true
    }
  ]

  # inputs to configure a 'run' block,
  # with defined defaults
  inputs = {
    user_name = user_name_1
  }

  # example assertion
  assert = {
    response.headers.csrf_token = assert.exist
  }

  # output to print to the CLI 
  outputs = [response.headers.csrf_token]
}

# drop secret get 
# Secret { key: "csrf_token", value: "secret_csrf_token", _env: "base" }

# drop hit example.post.login

post "login" {
  base_url = env.base_url

  path = mod.login_path

  headers = [
    { "csrf_token" : inputs.csrf_token },
    { "user_name" : inputs.user_name },
    { "user_password" : user_password },
  ]

  #
  # hcl utility helpers for headers
  # 
  # headers = [
  #   { "authorization" : bearer(secrets.api_token) },
  #   { "authorization" : basic_auth(username, password) },
  # ]

  assert = {
    response.body.token   = assert.exist
    response.body.user_id = 42
  }

  # set multiple variables
  after = [
    {
      "type" : "set_secret",
      "input" : response.body.token,
      "key" : "secret_auth_token",
      "env" : "base",
      "overwrite" : true
    },
    {
      "type" : "set_secret",
      "input" : response.body.user_id,
      "key" : "user_id",
      "env" : "base",
      "overwrite" : true
    }
  ]

  inputs = {
    user_name  = user_name_1
    csrf_token = secrets.csrf_token
  }

  outputs = [response.body.token, response.body.user_id]
}

run "login_user_2" {

  hit = example.post.login

  inputs = {
    user_name = user_name_2
    csrf_token = secrets.csrf_token
  }

  assert = {
    response.body.token   = assert.exist
    response.body.user_id = 88

    # other supported assertions (see AssertExpectedValueObjectOperator)
    # response.body.[variable] = assert.not_exist
    # response.body.[variable] = true / false
    # response.body.[variable]  = { assert.contains = [value] }
    # response.body.[variable]  = { assert.starts_with = [value] }
    # response.body.[variable]  = { assert.greater_than = [value] }
    # response.body.[variable]  = { assert.less_than = [value] }
    # response.body.[variable]  = { assert.length = [value] }
  }

  outputs = [response.body.user_id]
}

get "user" {
  base_url = env.base_url

  path = mod.user_path

  headers = [
    # can encapsulate headers
    mod.auth_token_header,
    mod.csrf_token_header
  ]

  outputs = [response.body]
}

get "user_with_input" {
  base_url = env.base_url

  path = mod.user_path

  headers = [
    { "csrf_token" : inputs.csrf_token },
    { "auth" : inputs.auth_token }
  ]

  inputs = {
    csrf_token = secrets.csrf_token
    auth_token = secrets.secret_auth_token
  }

  outputs = [response.body]
}
